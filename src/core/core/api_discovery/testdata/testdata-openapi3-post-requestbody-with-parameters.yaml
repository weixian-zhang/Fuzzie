openapi: "3.0.0"
info:
  title: Simple API overview
  version: 2.0.0



paths:

  # post nested json
  /secure/oauth/services/v2/Nested:
    post:
      summary: Try nested
      description: Used to post Nested obj
      # header parameters
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
        - in: cookie
          name: debug
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - in: cookie
          name: csrftoken
          schema:
            type: string
      # body    
      requestBody:
        required: true
        content:
          application/json:
            schema:
                type: object 
                required:
                - id
                - nestedobj
                properties:
                    id:
                      type: integer
                      description: id of nested obj
                    nestedobj:
                      $ref: '#/components/schemas/nestedobj'
      responses:
        '200':
          description: Nested object OK

  #post Json with examples
  /pet:
    post:
      tags:
      - pet
      summary: Add a new pet to the store
      description: ''
      operationId: addPet
      
      # header parameters
      parameters:
        - in: header
          name: X-Request-ID
          schema:
            type: string
            format: uuid
        - in: cookie
          name: debug
          schema:
            type: integer
            enum: [0, 1]
            default: 0
        - in: cookie
          name: csrftoken
          schema:
            type: string

      requestBody:
        description: Pet object that needs to be added to the store
        required: true
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/Pet"
            examples:
              Cat:
                summary: An example of cat
                description: An example of cat, using `value` property
                value:
                  id: 1
                  category:
                    id: 1
                    name: cat
                  name: fluffy
                  photoUrls:
                  - http://example.com/path/to/cat/1.jpg
                  - http://example.com/path/to/cat/2.jpg
                  tags:
                  - id: 1
                    name: cat
                  status: available
              Cat2:
                summary: An example of cat
                description: An example of cat, using `value` property, which value
                  is an array
                value:
                - id: 1
                  category:
                    id: 1
                    name: cat
                  name: fluffy
                  photoUrls:
                  - http://example.com/path/to/cat/1.jpg
                  - http://example.com/path/to/cat/2.jpg
                  tags:
                  - id: 1
                    name: cat
                  status: available
              Dog:
                summary: An example of dog
                description: An example of dog, using `externalValue` property
                externalValue: http://example.com/examples/dog.json
          application/xml:
            schema:
              "$ref": "#/components/schemas/Pet"
            examples:
              Cat:
                summary: An example of cat
                description: An example of cat, using `value` property
                value: "<xml></xml>"
              Dog:
                summary: An example of dog
                description: An example of dog, using `externalValue` property
                externalValue: http://example.com/examples/dog.xml
      responses:
        '405':
          description: Invalid input




components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Message:
      title: A Slack message
      type: object
      properties:
        text:
          type: string
          description: Message text
      required:
        - text

    element:
      type: object
      required:
      - fieldArray1
      properties:
        fieldArray1:
          type: string
          description: field array
        fieldArray2:
          type: number
    nestedobj:
      type: object
      required:
      - field1
      description: nested object
      properties:
        field1:
          $ref: '#/components/schemas/woah'
        field2:
          type: string
    woah:
      type: object
      required:
      - woahthis
      description: woah this
      properties:
        field3:
          type: array
          items:
            $ref: '#/components/schemas/element'
        woahthis:
          type: number
          description: numeber woah this

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
      - name
      - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          "$ref": "#/components/schemas/Category"
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            "$ref": "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet