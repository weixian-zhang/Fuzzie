openapi: "3.0.0"
info:
  title: Simple API overview
  version: 2.0.0

# To apply Basic auth to the whole API:
security:
  - basicAuth: []
  - bearerAuth: []
  - ApiKeyAuth: []

paths:

  #POST multipart form with nested Json
  /multipart-form-data/nestedjson-1:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                simple: 
                  type: string
                complex:
                  type: object
                  properties:
                    key: 
                      type: string
                    size: 
                      type: integer
                    nestyArrays1:
                      type: array
                      items:
                        type: string
                    innerObject:
                      type: object
                      properties:      # Request parts
                        id:            # Part 1 (string value)
                          type: string
                          format: uuid
                        address:       # Part2 (object)
                          type: object
                          properties:
                            street:
                              type: string
                            city:
                              type: string
                        profileImage:  # Part 3 (an image)
                          type: string
                          format: binary
                      
            encoding:
              complex:
                contentType: application/json
      responses:
        '200':
          description: OK


components:
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
    BearerAuth:
      type: http
      scheme: bearer
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key

  schemas:
    Message:
      title: A Slack message
      type: object
      properties:
        text:
          type: string
          description: Message text
      required:
        - text

    element:
      type: object
      required:
      - fieldArray1
      properties:
        fieldArray1:
          type: string
          description: field array
        fieldArray2:
          type: number
    nestedobj:
      type: object
      required:
      - field1
      description: nested object
      properties:
        field1:
          $ref: '#/components/schemas/woah'
        field2:
          type: string
    woah:
      type: object
      required:
      - woahthis
      description: woah this
      properties:
        field3:
          type: array
          items:
            $ref: '#/components/schemas/element'
        woahthis:
          type: number
          description: numeber woah this

    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Category
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: Tag
    Pet:
      type: object
      required:
      - name
      - photoUrls
      properties:
        id:
          type: integer
          format: int64
        category:
          "$ref": "#/components/schemas/Category"
        name:
          type: string
          example: doggie
        photoUrls:
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
        tags:
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            "$ref": "#/components/schemas/Tag"
        status:
          type: string
          description: pet status in the store
          enum:
          - available
          - pending
          - sold
      xml:
        name: Pet